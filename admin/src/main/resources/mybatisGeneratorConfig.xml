<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>
	<!--执行generator插件生成文件的命令： call mvn mybatis-generator:generate -e -->
	<!-- 引入配置文件 -->
	<properties resource="application-db.properties" />
	<!--classPathEntry:数据库的JDBC驱动,换成你自己的驱动位置 可选 -->
	<!--<classPathEntry location="D:\generator_mybatis\mysql-connector-java-5.1.24-bin.jar" 
		/> -->

	<!-- 一个数据库一个context -->
	<!--defaultModelType="flat" 大数据字段，不分表 -->
	<context id="Admin" targetRuntime="MyBatis3Simple"
		defaultModelType="flat">
		<!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表； 一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
		<property name="autoDelimitKeywords" value="false" />
		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="utf-8" />
		<!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
		<property name="beginningDelimiter" value="`" />
		<property name="endingDelimiter" value="`" />

		<!-- 格式化java代码 -->
		<property name="javaFormatter"
			value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
		<!-- 格式化XML代码 -->
		<property name="xmlFormatter"
			value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />
		<plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

		<plugin type="org.mybatis.generator.plugins.ToStringPlugin" />

		<!-- 注释 -->
		<commentGenerator>
			<property name="suppressAllComments" value="true" /><!-- 是否取消注释 -->
			<property name="suppressDate" value="true" /> <!-- 是否生成注释代时间戳 -->
		</commentGenerator>

		<!-- jdbc连接 -->
		<jdbcConnection driverClass="${db.driver}"
			connectionURL="${db.url}" userId="${db.username}"
			password="${db.password}" />
		<!-- 类型转换 -->
		<javaTypeResolver>
			<!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
			<property name="forceBigDecimals" value="true" />
		</javaTypeResolver>

		<!-- 生成实体类地址 -->
		<javaModelGenerator
			targetPackage="com.cj.admin.domain" targetProject="src/main/java">
			<property name="enableSubPackages" value="false" />
			<property name="trimStrings" value="true" />
		</javaModelGenerator>

		<!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 targetPackage/targetProject:同javaModelGenerator 
			type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）： 1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML； 
			2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中； 3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML； 
			注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER -->
		<javaClientGenerator
			targetPackage="com.cj.admin.dao" type="ANNOTATEDMAPPER"
			targetProject="src/main/java">
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<property name="enableSubPackages" value="true" />

			<!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查 <property name="rootInterface" 
				value=""/> -->
		</javaClientGenerator>

		<!-- table可以有多个,每个数据库中的表都可以写一个table，tableName表示要匹配的数据库表,也可以在tableName属性中通过使用%通配符来匹配所有数据库表,只有匹配的表才会自动生成文件 -->
		<table tableName="cj_user" domainObjectName="User" enableCountByExample="true"
			enableUpdateByExample="true" enableDeleteByExample="true"
			enableSelectByExample="true" selectByExampleQueryId="true">
			<property name="useActualColumnNames" value="false" />
			<!-- 数据库表主键 -->
			<generatedKey column="id" sqlStatement="Mysql"
				identity="true" />
			<!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
             column:要重新设置的列名；
             注意，一个table元素中可以有多个columnOverride元素哈~
          -->
		</table>
		<table tableName="cj_role" domainObjectName="Role" enableCountByExample="true"
			enableUpdateByExample="true" enableDeleteByExample="true"
			enableSelectByExample="true" selectByExampleQueryId="true">
			<property name="useActualColumnNames" value="false" />
			<!-- 数据库表主键 -->
			<generatedKey column="id" sqlStatement="Mysql"
				identity="true" />
			<!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
             column:要重新设置的列名；
             注意，一个table元素中可以有多个columnOverride元素哈~
          -->
		</table>
		<table tableName="cj_permission" domainObjectName="Permission" enableCountByExample="true"
			enableUpdateByExample="true" enableDeleteByExample="true"
			enableSelectByExample="true" selectByExampleQueryId="true">
			<property name="useActualColumnNames" value="false" />
			<!-- 数据库表主键 -->
			<generatedKey column="id" sqlStatement="Mysql"
				identity="true" />
			<!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
             column:要重新设置的列名；
             注意，一个table元素中可以有多个columnOverride元素哈~
          -->
		</table>
		<table tableName="cj_organization" domainObjectName="Organization" enableCountByExample="true"
			enableUpdateByExample="true" enableDeleteByExample="true"
			enableSelectByExample="true" selectByExampleQueryId="true">
			<property name="useActualColumnNames" value="false" />
			<!-- 数据库表主键 -->
			<generatedKey column="id" sqlStatement="Mysql"
				identity="true" />
			<!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
             column:要重新设置的列名；
             注意，一个table元素中可以有多个columnOverride元素哈~
          -->
		</table>
		<table tableName="cj_user_role" domainObjectName="UserRole" enableCountByExample="true"
			enableUpdateByExample="true" enableDeleteByExample="true"
			enableSelectByExample="true" selectByExampleQueryId="true">
			<property name="useActualColumnNames" value="false" />
			<!-- 数据库表主键 -->
			<generatedKey column="id" sqlStatement="Mysql"
				identity="true" />
			<!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
             column:要重新设置的列名；
             注意，一个table元素中可以有多个columnOverride元素哈~
          -->
		</table>
		<table tableName="cj_user_permission" domainObjectName="UserPermission" enableCountByExample="true"
			enableUpdateByExample="true" enableDeleteByExample="true"
			enableSelectByExample="true" selectByExampleQueryId="true">
			<property name="useActualColumnNames" value="false" />
			<!-- 数据库表主键 -->
			<generatedKey column="id" sqlStatement="Mysql"
				identity="true" />
			<!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
             column:要重新设置的列名；
             注意，一个table元素中可以有多个columnOverride元素哈~
          -->
		</table>
		<table tableName="cj_user_organization" domainObjectName="UserOrganization" enableCountByExample="true"
			enableUpdateByExample="true" enableDeleteByExample="true"
			enableSelectByExample="true" selectByExampleQueryId="true">
			<property name="useActualColumnNames" value="false" />
			<!-- 数据库表主键 -->
			<generatedKey column="id" sqlStatement="Mysql"
				identity="true" />
			<!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
             column:要重新设置的列名；
             注意，一个table元素中可以有多个columnOverride元素哈~
          -->
		</table>
		<table tableName="cj_role_organization" domainObjectName="RoleOrganization" enableCountByExample="true"
			enableUpdateByExample="true" enableDeleteByExample="true"
			enableSelectByExample="true" selectByExampleQueryId="true">
			<property name="useActualColumnNames" value="false" />
			<!-- 数据库表主键 -->
			<generatedKey column="id" sqlStatement="Mysql"
				identity="true" />
			<!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
             column:要重新设置的列名；
             注意，一个table元素中可以有多个columnOverride元素哈~
          -->
		</table>
		<table tableName="cj_role_permission" domainObjectName="RolePermission" enableCountByExample="true"
			enableUpdateByExample="true" enableDeleteByExample="true"
			enableSelectByExample="true" selectByExampleQueryId="true">
			<property name="useActualColumnNames" value="false" />
			<!-- 数据库表主键 -->
			<generatedKey column="id" sqlStatement="Mysql"
				identity="true" />
			<!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
             column:要重新设置的列名；
             注意，一个table元素中可以有多个columnOverride元素哈~
          -->
		</table>
		<table tableName="cj_organization_permission" domainObjectName="OrganizationPermission" enableCountByExample="true"
			enableUpdateByExample="true" enableDeleteByExample="true"
			enableSelectByExample="true" selectByExampleQueryId="true">
			<property name="useActualColumnNames" value="false" />
			<!-- 数据库表主键 -->
			<generatedKey column="id" sqlStatement="Mysql"
				identity="true" />
			<!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
             column:要重新设置的列名；
             注意，一个table元素中可以有多个columnOverride元素哈~
          -->
		</table>
	</context>
</generatorConfiguration>